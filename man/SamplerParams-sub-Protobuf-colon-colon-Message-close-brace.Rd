% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/protobuf_messages.R
\name{SamplerParams [Protobuf::Message]}
\alias{SamplerParams [Protobuf::Message]}
\title{Parameters of the \code{SPMIX} samplers}
\format{
A Protobuf::Message with the following fields:
\describe{
\item{num_components}{An integer setting the initial number of components.}
\item{p0_params}{A \code{NormalGammaParams} message, that can be simply imagined as a named tuple
storing the prior paramteres for the atom base measure \mjseqn{ P_{0} }, in our case a Normal-Inverse-Gamma
measure defined as \mjseqn{P_{0}( \mu , \sigma ^2) \sim \mathcal{N}( \mu \lvert \sigma ^2; \mu_{0}, \lambda^{-1}
  \sigma ^2) \times \operatorname{IG}(\sigma^2; a, b) }. Hence, this message stores four double, i.e.
\mjseqn{(\mu_{0}, a, b, \lambda)}.}
\item{rho_params}{A \code{BetaParams} message that stores the distribution parameters for \mjseqn{\rho},
whose prior is a Beta distribution of parameters \mjseqn{(\alpha,\beta)}.}
\item{sigma_params}{a \code{VarianceParams} message that stores the prior parameters for the variance
of the transformed weights. Note that at different models correspond different definitions of such parameter.
In case of fixed dimension, we have a Inverse Wishart distribution for a full matrix \mjseqn{\boldsymbol{\Sigma}},
while in case of varying dimension, we assume \mjseqn{\boldsymbol{\Sigma}=\sigma^2\mathbf{I}} and put
an Inverse Gamma prior on \mjseqn{\sigma^2}. In order to manage both, \code{VarianceParams} is structured
using a \code{oneof} field, thus making it capable of storing both parameters of an Inverse Wishart prior
\mjseqn{\textstyle(\nu,\mathbf{I})} and an Inverse Gamma prior \mjseqn{\textstyle(a_{\sigma^2},b_{\sigma^2})}.}
}
}
\description{
\loadmathjax This protobuf message provides the data structure to encode the prior hyper-parameters of the
\code{SPMIX} samplers available in this package. Using \code{\link{RProtoBuf}} package one can easily
retrieve the descriptor and build it from scratch or either parse it from a \code{.asciipb} file.
}
\examples{
# Retrieve message descriptor
RProtoBuf::readProtoFiles(system.file("proto/sampler_params.proto", package = "SPMIX"))
names(SamplerParams)

# Build a new message from scratch
params <- RProtoBuf::new(SamplerParams)

# Read from file (NOT RUN)
params <- RProtoBuf::readASCII(SamplerParams, file("path/to/file.asciipb"))

}
