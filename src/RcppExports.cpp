// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// Alr
Eigen::VectorXd Alr(Eigen::VectorXd x);
RcppExport SEXP _SPMIX_Alr(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Alr(x));
    return rcpp_result_gen;
END_RCPP
}
// InvAlr
Eigen::VectorXd InvAlr(Eigen::VectorXd x);
RcppExport SEXP _SPMIX_InvAlr(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(InvAlr(x));
    return rcpp_result_gen;
END_RCPP
}
// runSpatialSampler
std::vector<Rcpp::RawVector> runSpatialSampler(int burnin, int niter, int thin, const std::vector<std::vector<double>>& data, const Eigen::MatrixXd& W, std::string params_str, const std::vector<Eigen::MatrixXd>& covariates, bool display_progress);
RcppExport SEXP _SPMIX_runSpatialSampler(SEXP burninSEXP, SEXP niterSEXP, SEXP thinSEXP, SEXP dataSEXP, SEXP WSEXP, SEXP params_strSEXP, SEXP covariatesSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< std::string >::type params_str(params_strSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(runSpatialSampler(burnin, niter, thin, data, W, params_str, covariates, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// runSpatialRJSampler
std::vector<Rcpp::RawVector> runSpatialRJSampler(int burnin, int niter, int thin, const std::vector<std::vector<double>>& data, const Eigen::MatrixXd& W, std::string params_str, const std::vector<Eigen::MatrixXd>& covariates, const std::string& options_str, bool display_progress);
RcppExport SEXP _SPMIX_runSpatialRJSampler(SEXP burninSEXP, SEXP niterSEXP, SEXP thinSEXP, SEXP dataSEXP, SEXP WSEXP, SEXP params_strSEXP, SEXP covariatesSEXP, SEXP options_strSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< std::string >::type params_str(params_strSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type options_str(options_strSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(runSpatialRJSampler(burnin, niter, thin, data, W, params_str, covariates, options_str, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// ReadMatrixFromCSV
Eigen::MatrixXd ReadMatrixFromCSV(std::string filename);
RcppExport SEXP _SPMIX_ReadMatrixFromCSV(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadMatrixFromCSV(filename));
    return rcpp_result_gen;
END_RCPP
}
// ReadDataFromCSV
std::vector<std::vector<double>> ReadDataFromCSV(std::string filename);
RcppExport SEXP _SPMIX_ReadDataFromCSV(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadDataFromCSV(filename));
    return rcpp_result_gen;
END_RCPP
}
// stan_HelloWorld
void stan_HelloWorld();
RcppExport SEXP _SPMIX_stan_HelloWorld() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    stan_HelloWorld();
    return R_NilValue;
END_RCPP
}
// newton_opt_test
void newton_opt_test(const Rcpp::S4& state, const std::vector<std::vector<double>>& data, const Eigen::MatrixXd& W, const Rcpp::S4& params, const Rcpp::S4& options);
RcppExport SEXP _SPMIX_newton_opt_test(SEXP stateSEXP, SEXP dataSEXP, SEXP WSEXP, SEXP paramsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type state(stateSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type options(optionsSEXP);
    newton_opt_test(state, data, W, params, options);
    return R_NilValue;
END_RCPP
}
// grad_ascent_test
void grad_ascent_test(const Rcpp::S4& state, const std::vector<std::vector<double>>& data, const Eigen::MatrixXd& W, const Rcpp::S4& params, const Rcpp::S4& options);
RcppExport SEXP _SPMIX_grad_ascent_test(SEXP stateSEXP, SEXP dataSEXP, SEXP WSEXP, SEXP paramsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type state(stateSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type options(optionsSEXP);
    grad_ascent_test(state, data, W, params, options);
    return R_NilValue;
END_RCPP
}
// test_spmixloglikelihood
void test_spmixloglikelihood(const std::vector<std::vector<double>>& data, const Eigen::MatrixXd& W, const std::string& params_str, const std::string& state_str);
RcppExport SEXP _SPMIX_test_spmixloglikelihood(SEXP dataSEXP, SEXP WSEXP, SEXP params_strSEXP, SEXP state_strSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type params_str(params_strSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type state_str(state_strSEXP);
    test_spmixloglikelihood(data, W, params_str, state_str);
    return R_NilValue;
END_RCPP
}
// RJsampler_test
void RJsampler_test(const std::vector<std::vector<double>>& data, const Eigen::MatrixXd& W, const Rcpp::S4& params, const Rcpp::S4& options);
RcppExport SEXP _SPMIX_RJsampler_test(SEXP dataSEXP, SEXP WSEXP, SEXP paramsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type options(optionsSEXP);
    RJsampler_test(data, W, params, options);
    return R_NilValue;
END_RCPP
}
// poisson_lpmf
void poisson_lpmf(size_t seed);
RcppExport SEXP _SPMIX_poisson_lpmf(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type seed(seedSEXP);
    poisson_lpmf(seed);
    return R_NilValue;
END_RCPP
}
// swapCols
Eigen::MatrixXd swapCols(Eigen::MatrixXd mat, unsigned int index1, unsigned int index2);
RcppExport SEXP _SPMIX_swapCols(SEXP matSEXP, SEXP index1SEXP, SEXP index2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type mat(matSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type index1(index1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type index2(index2SEXP);
    rcpp_result_gen = Rcpp::wrap(swapCols(mat, index1, index2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SPMIX_Alr", (DL_FUNC) &_SPMIX_Alr, 1},
    {"_SPMIX_InvAlr", (DL_FUNC) &_SPMIX_InvAlr, 1},
    {"_SPMIX_runSpatialSampler", (DL_FUNC) &_SPMIX_runSpatialSampler, 8},
    {"_SPMIX_runSpatialRJSampler", (DL_FUNC) &_SPMIX_runSpatialRJSampler, 9},
    {"_SPMIX_ReadMatrixFromCSV", (DL_FUNC) &_SPMIX_ReadMatrixFromCSV, 1},
    {"_SPMIX_ReadDataFromCSV", (DL_FUNC) &_SPMIX_ReadDataFromCSV, 1},
    {"_SPMIX_stan_HelloWorld", (DL_FUNC) &_SPMIX_stan_HelloWorld, 0},
    {"_SPMIX_newton_opt_test", (DL_FUNC) &_SPMIX_newton_opt_test, 5},
    {"_SPMIX_grad_ascent_test", (DL_FUNC) &_SPMIX_grad_ascent_test, 5},
    {"_SPMIX_test_spmixloglikelihood", (DL_FUNC) &_SPMIX_test_spmixloglikelihood, 4},
    {"_SPMIX_RJsampler_test", (DL_FUNC) &_SPMIX_RJsampler_test, 4},
    {"_SPMIX_poisson_lpmf", (DL_FUNC) &_SPMIX_poisson_lpmf, 1},
    {"_SPMIX_swapCols", (DL_FUNC) &_SPMIX_swapCols, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SPMIX(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
